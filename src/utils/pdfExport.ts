
import { AnalysisResult } from '@/types/analysis';

export const generatePDFReport = async (analysis: AnalysisResult, inputText: string) => {
  // Create a simple HTML template for PDF generation
  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Bias Analysis Report</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
        .section { margin-bottom: 25px; }
        .bias-score { font-size: 24px; font-weight: bold; text-align: center; padding: 20px; border-radius: 8px; }
        .left { background-color: #dbeafe; color: #1e40af; }
        .right { background-color: #fee2e2; color: #dc2626; }
        .neutral { background-color: #f0fdf4; color: #16a34a; }
        .highlight { padding: 2px 4px; border-radius: 3px; }
        .highlight.left { background-color: #bfdbfe; }
        .highlight.right { background-color: #fecaca; }
        .highlight.neutral { background-color: #e5e7eb; }
        .chart-placeholder { height: 200px; background-color: #f9fafb; border: 1px dashed #d1d5db; display: flex; align-items: center; justify-content: center; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>DeCode Bias Analysis Report</h1>
        <p>Generated on ${new Date().toLocaleDateString()}</p>
      </div>
      
      <div class="section">
        <h2>Input Text</h2>
        <p style="background-color: #f9fafb; padding: 15px; border-radius: 8px; border-left: 4px solid #6b7280;">
          ${inputText}
        </p>
      </div>
      
      <div class="section">
        <h2>Bias Classification</h2>
        <div class="bias-score ${analysis.bias.toLowerCase()}">
          ${analysis.bias} Bias (${analysis.confidence}% confidence)
          <br>
          <small>Score: ${analysis.biasScore}/100</small>
        </div>
      </div>
      
      <div class="section">
        <h2>Analysis Explanation</h2>
        <p>${analysis.explanation}</p>
      </div>
      
      <div class="section">
        <h2>Emotional Tone Breakdown</h2>
        <ul>
          <li>Anger: ${analysis.emotionalTone.anger}%</li>
          <li>Fear: ${analysis.emotionalTone.fear}%</li>
          <li>Joy: ${analysis.emotionalTone.joy}%</li>
          <li>Neutral: ${analysis.emotionalTone.neutral}%</li>
        </ul>
      </div>
      
      <div class="section">
        <h2>Key Biased Terms</h2>
        <p>
          ${analysis.highlightedWords.map(word => `<span class="highlight ${analysis.bias.toLowerCase()}">${word}</span>`).join(', ')}
        </p>
      </div>
      
      <div class="section">
        <h2>Neutral Summary</h2>
        <p style="background-color: #eff6ff; padding: 15px; border-radius: 8px; border-left: 4px solid #3b82f6;">
          ${analysis.summary}
        </p>
      </div>
      
      <div style="margin-top: 50px; text-align: center; color: #6b7280; font-size: 12px;">
        <p>Generated by DeCode - AI-Powered Bias Detection Tool</p>
      </div>
    </body>
    </html>
  `;

  // Create a blob with the HTML content
  const blob = new Blob([htmlContent], { type: 'text/html' });
  const url = URL.createObjectURL(blob);
  
  // Create a temporary link to download
  const link = document.createElement('a');
  link.href = url;
  link.download = `bias-analysis-${new Date().toISOString().split('T')[0]}.html`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  // Clean up
  URL.revokeObjectURL(url);
};

export const shareAnalysis = (analysis: AnalysisResult) => {
  const shareData = {
    title: 'DeCode Bias Analysis Result',
    text: `Analysis Result: ${analysis.bias} bias with ${analysis.confidence}% confidence. ${analysis.summary}`,
    url: window.location.href
  };

  if (navigator.share) {
    navigator.share(shareData);
  } else {
    // Fallback: copy to clipboard
    navigator.clipboard.writeText(`${shareData.title}\n\n${shareData.text}\n\n${shareData.url}`);
  }
};
